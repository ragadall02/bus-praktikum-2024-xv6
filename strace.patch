diff --git a/Makefile b/Makefile
index 0a6df03..4785387 100644
--- a/Makefile
+++ b/Makefile
@@ -138,6 +138,7 @@ UPROGS=\
 	$U/_mkdir\
 	$U/_rm\
 	$U/_sh\
+	$U/_strace \
 	$U/_stressfs\
 	$U/_usertests\
 	$U/_grind\
diff --git a/kernel/defs.h b/kernel/defs.h
index d1b6bb9..ae41bab 100644
--- a/kernel/defs.h
+++ b/kernel/defs.h
@@ -106,6 +106,7 @@ void            yield(void);
 int             either_copyout(int user_dst, uint64 dst, void *src, uint64 len);
 int             either_copyin(void *dst, int user_src, uint64 src, uint64 len);
 void            procdump(void);
+void            set_enable_tracing(int en);

 // swtch.S
 void            swtch(struct context*, struct context*);
diff --git a/kernel/proc.c b/kernel/proc.c
index 130d9ce..f6e6926 100644
--- a/kernel/proc.c
+++ b/kernel/proc.c
@@ -12,6 +12,8 @@ struct proc proc[NPROC];

 struct proc *initproc;

+int en_strace = 0;
+
 int nextpid = 1;
 struct spinlock pid_lock;

@@ -124,6 +126,7 @@ allocproc(void)
 found:
   p->pid = allocpid();
   p->state = USED;
+  p->strace = en_strace;

   // Allocate a trapframe page.
   if((p->trapframe = (struct trapframe *)kalloc()) == 0){
@@ -693,3 +696,20 @@ procdump(void)
     printf("\n");
   }
 }
+
+void
+set_enable_tracing(int en)
+{
+  if (en_strace == en) {
+    return;
+  } else {
+    en_strace = en;
+
+    struct proc* p;
+    for (p = proc; p < &proc[NPROC]; p++) {
+      acquire(&p->lock);
+      p->strace = en;
+      release(&p->lock);
+    }
+  }
+}
diff --git a/kernel/proc.h b/kernel/proc.h
index d021857..d6c1e67 100644
--- a/kernel/proc.h
+++ b/kernel/proc.h
@@ -91,6 +91,7 @@ struct proc {
   int killed;                  // If non-zero, have been killed
   int xstate;                  // Exit status to be returned to parent's wait
   int pid;                     // Process ID
+  int strace;                  // If non-zero, trace this procs syscalls

   // wait_lock must be held when using this:
   struct proc *parent;         // Parent process
diff --git a/kernel/syscall.c b/kernel/syscall.c
index ed65409..ff30d53 100644
--- a/kernel/syscall.c
+++ b/kernel/syscall.c
@@ -101,6 +101,7 @@ extern uint64 sys_unlink(void);
 extern uint64 sys_link(void);
 extern uint64 sys_mkdir(void);
 extern uint64 sys_close(void);
+extern uint64 sys_strace(void);

 // An array mapping syscall numbers from syscall.h
 // to the function that handles the system call.
@@ -126,8 +127,57 @@ static uint64 (*syscalls[])(void) = {
 [SYS_link]    sys_link,
 [SYS_mkdir]   sys_mkdir,
 [SYS_close]   sys_close,
+[SYS_strace]  sys_strace,
 };

+static char syscall_names[NELEM(syscalls)][10] = {
+[SYS_fork]    "fork",
+[SYS_exit]    "exit",
+[SYS_wait]    "wait",
+[SYS_pipe]    "pipe",
+[SYS_read]    "read",
+[SYS_kill]    "kill",
+[SYS_exec]    "exec",
+[SYS_fstat]   "fstat",
+[SYS_chdir]   "chdir",
+[SYS_dup]     "dup",
+[SYS_getpid]  "getpid",
+[SYS_sbrk]    "sbrk",
+[SYS_sleep]   "sleep",
+[SYS_uptime]  "uptime",
+[SYS_open]    "open",
+[SYS_write]   "write",
+[SYS_mknod]   "mknod",
+[SYS_unlink]  "unlink",
+[SYS_link]    "link",
+[SYS_mkdir]   "mkdir",
+[SYS_close]   "close",
+[SYS_strace]  "strace",
+};
+
+void
+strace_helper(int num)
+{
+  static int last_syscall = -1;
+  static int c = 0;
+
+  struct proc* p = myproc();
+
+  if (p->strace) {
+    if (num == SYS_write) {
+      c++;
+    }
+    if (last_syscall == SYS_write && num != SYS_write) {
+      printf(">%s used syscall %s %dx times\n", p->name, syscall_names[last_syscall], c);
+      c = 0;
+    }
+    if (num != SYS_write)
+      printf(">%s used syscall %s\n", p->name, syscall_names[num]);
+
+    last_syscall = num;
+  }
+}
+
 void
 syscall(void)
 {
@@ -136,6 +186,7 @@ syscall(void)

   num = p->trapframe->a7;
   if(num > 0 && num < NELEM(syscalls) && syscalls[num]) {
+    strace_helper(num);
     // Use num to lookup the system call function for num, call it,
     // and store its return value in p->trapframe->a0
     p->trapframe->a0 = syscalls[num]();
diff --git a/kernel/syscall.h b/kernel/syscall.h
index bc5f356..c6661f0 100644
--- a/kernel/syscall.h
+++ b/kernel/syscall.h
@@ -20,3 +20,4 @@
 #define SYS_link   19
 #define SYS_mkdir  20
 #define SYS_close  21
+#define SYS_strace 22
diff --git a/kernel/sysproc.c b/kernel/sysproc.c
index 3b4d5bd..7fc768e 100644
--- a/kernel/sysproc.c
+++ b/kernel/sysproc.c
@@ -91,3 +91,28 @@ sys_uptime(void)
   release(&tickslock);
   return xticks;
 }
+
+#define MAXSTRING 8
+
+uint64
+sys_strace(void)
+{
+  struct proc* p = myproc();
+  char cmd[8];
+
+  int f = argstr(0, cmd, MAXSTRING);
+  if (f == -1)
+    return -1;
+
+  if (strncmp(cmd, "enable", MAXSTRING) == 0) {
+    set_enable_tracing(1);
+  } else  if (strncmp(cmd, "disable", MAXSTRING) == 0) {
+    set_enable_tracing(0);
+  } else {
+    set_enable_tracing(0);
+    acquire(&p->lock);
+    p->strace = 1;
+    release(&p->lock);
+  }
+  return 0;
+}
diff --git a/user/user.h b/user/user.h
index f16fe27..ca1fbfa 100644
--- a/user/user.h
+++ b/user/user.h
@@ -22,6 +22,7 @@ int getpid(void);
 char* sbrk(int);
 int sleep(int);
 int uptime(void);
+int strace(const char*);

 // ulib.c
 int stat(const char*, struct stat*);
diff --git a/user/usys.pl b/user/usys.pl
index 01e426e..8dbef5c 100755
--- a/user/usys.pl
+++ b/user/usys.pl
@@ -36,3 +36,4 @@ entry("getpid");
 entry("sbrk");
 entry("sleep");
 entry("uptime");
+entry("strace");
diff --git a/user/strace.c b/user/strace.c
new file mode 100644
index 0000000..8bb2229
--- /dev/null
+++ b/user/strace.c
@@ -0,0 +1,21 @@
+#include "kernel/types.h"
+#include "kernel/stat.h"
+#include "user.h"
+
+int
+main(int argc, char* argv[])
+{
+    if (argc < 2)
+        exit(1);
+
+    char* arg = argv[1];
+
+    if (strcmp(arg, "enable") == 0 || strcmp(arg, "disable") == 0) {
+        strace(arg);
+    } else {
+        argv++;
+        strace(arg);
+        exec(arg, argv);
+    }
+    exit(0);
+}
